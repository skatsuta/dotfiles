"==========================================================================
"  Description: Vim configuration file
"       Author: Soshi Katsuta
"==========================================================================

scriptencoding utf-8
set encoding=utf-8
set fileencodings=utf-8
set fileformat=unix
set shell=/bin/bash

"----------------------------------------
" User Runtime Path
"----------------------------------------
" Absorb the difference of runtime path between Windows and Unix
" $MY_VIMRUNTIME points to the user's runtime directory
" To check its value, `:echo $MY_VIMRUNTIME`
if isdirectory($HOME . '/.vim')
  let $MY_VIMRUNTIME = $HOME.'/.vim'
elseif isdirectory($HOME . '\vimfiles')
  let $MY_VIMRUNTIME = $HOME.'\vimfiles'
elseif isdirectory($VIM . '\vimfiles')
  let $MY_VIMRUNTIME = $VIM.'\vimfiles'
endif
" If you want to use a plugin that needs to be placed in runtime path,
" use $MY_VIMRUNTIME to avoid the difference between platforms.
" For example, to use '~/.vim/qfixapp' in Linux,
"set runtimepath+=$MY_VIMRUNTIME/qfixapp

"----------------------------------------
" System Configuration
"----------------------------------------
" Do not create a backup before overwriting the file
"set nowritebackup
" Do not create a backup/swap file
"set nobackup
" Enable only if the version is 7.3 or greater
if version >= 703
  " Enable to keep remembering undos even if Vim reloads or restarts
  set undofile
  " Save location of undos
  set undodir=./.vimundo
  " Delete comment character when joining commented lines
  set formatoptions+=j
endif
" Do not create .swp file
"set noswapfile
" Do not create viminfo
"set viminfo=
" Share clipboard only if tmux is not running
if $TMUX == ''
  set clipboard+=unnamed
endif
" Disable octal; affects <C-a> and <C-x>
set nrformats-=octal
" Timeout to wait for completing key input (miliseconds; default 1000)
"set timeoutlen=3500
" Do not show warnings when opening a new buffer from one that is not saved
set hidden
" The number of histories saved
set history=10000
" Do not insert a space when joining Japanese sentences
set formatoptions+=mM
" Enable free cursor in visual block mode
set virtualedit=block
" Enable cursor keys to move beginning/end of line
"set whichwrap=b,s,[,],<,>
" Enable backspace to delete indent and line break
set backspace=indent,eol,start
" Set width of Asian characters to double size
set ambiwidth=double
" Use tab completion in command line mode (ref. :help wildmenu)
set wildmenu
" Enable mouse
set mouse=a
set ttymouse=xterm2
" Backup directory
set backupdir=/tmp
set directory=/tmp
" Enable lazy redraw
set lazyredraw
" Connect faster to TTY
set ttyfast
" Change Leader key to ','
let mapleader=","


"----------------------------------------
" Search
"----------------------------------------
" Enable case-insensitive
set ignorecase
" Enable case-sensitive only if a query contains both uppercase and lowercase
set smartcase
" Enable incremental search
set incsearch
" Disable highlighting for search
set nohlsearch
" Characters recognized as a 'word' (affects the movements of 'w' and 'b')
"set iskeyword=a-z,A-Z,48-57,_,.,-,>
" 'internal' means setting vimgrep as a default grep command
"set grepprg=internal

"----------------------------------------
" Display Options
"----------------------------------------
" Do not show splash (starting message)
set shortmess+=I
" Disable beeping and flash
set noerrorbells
set novisualbell
set visualbell t_vb=
" Any action that is not typed will not cause the screen to redraw
"set lazyredraw
" A forward slash is used when expanding file names (even on Windows)
set shellslash
" Show line number
set number
" Time to show the matching paren ('noshowmatch': not display)
set showmatch matchtime=1
" Set the number of spaces that a <Tab> in the file counts for
"   (ts=tabstop, sw=shiftwidth, sts=softtabstop)
set ts=2 sw=2 sts=0
" Copy indent from current line when starting a new line
set autoindent
" The title of the window will be set to the value of a filename
set title
" The number of screen lines to use for the command line
set cmdheight=1
set laststatus=2
" Show command in the last line of the screen
set showcmd
" As much as possible of the last line in a window will be displayed
set display=lastline
" Show special characters
set list
set listchars=tab:»\ ,trail:~
" Expand tabs into spaces (noexpandtab: no expanding)
set expandtab
" Don't extract tabs in Go file
autocmd BufRead *.go set noexpandtab
" Enable folding by syntax highlighting ('indent': by groups of lines with the same indent form)
"set foldmethod=syntax
" Show the line and column number of the cursor position, separated by a comma
set ruler
" Enable highlighting
if &t_Co > 2 || has('gui_running')
  syntax on
endif
" Highlight the column
set colorcolumn=100
" Color scheme
colorscheme default


"---------------------------------
" Golang
"---------------------------------
filetype off
filetype plugin indent off
set runtimepath+=/usr/local/opt/go/libexec/misc/vim
filetype plugin indent on
filetype on


"---------------------------------
" Syntax Highlighting
"---------------------------------
" Highlight Groovy scripts
au BufNewFile,BufRead *.gradle setf groovy
" Highlight .envrc as well as shell script
au BufNewFile,BufRead .envrc set filetype=sh


"---------------------------------
" Status Line
"---------------------------------
" Format: file name (file path)     [Git(branch)][+][vim][file encoding][line ending][row, column]
" Ref: http://hail2u.net/blog/software/optimize-vim-statusline.html
set statusline=%{expand('%:p:t')}\ %<\(%{expand('%:p:h')}\)%=\ %{fugitive#statusline()}%m%r%y%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}[%3l,%3c]

" Change color of status line in insert mode
let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=yellow cterm=none'
if has('syntax')
  augroup InsertHook
    autocmd!
    autocmd InsertEnter * call s:StatusLine('Enter')
    autocmd InsertLeave * call s:StatusLine('Leave')
  augroup END
endif
let s:slhlcmd = ''
function! s:StatusLine(mode)
  if a:mode == 'Enter'
    silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    silent exec g:hi_insert
  else
    highlight clear StatusLine
    silent exec s:slhlcmd
    redraw
  endif
endfunction
function! s:GetHighlight(hi)
  redir => hl
  exec 'highlight '.a:hi
  redir END
  let hl = substitute(hl, '[\r\n]', '', 'g')
  let hl = substitute(hl, 'xxx', '', '')
  return hl
endfunction


"----------------------------------------
" diff/patch
"----------------------------------------
if has('win32') || has('win64')
  set diffexpr=MyDiff()
  function! MyDiff()
    let opt = '-a --binary '
    if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
    if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
    let arg1 = v:fname_in
    if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
    let arg2 = v:fname_new
    if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
    let arg3 = v:fname_out
    if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
    let cmd = '!diff ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
    silent execute cmd
  endfunction
endif

" Show diff in current buffer
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
" Show diff in a specified file or buffer
command! -nargs=? -complete=file Diff if '<args>'=='' | browse vertical diffsplit|else| vertical diffsplit <args>|endif
" Patch command
set patchexpr=MyPatch()
function! MyPatch()
   :call system($VIM."\\'.'patch -o " . v:fname_out . " " . v:fname_in . " < " . v:fname_diff)
endfunction

"----------------------------------------
" Normal Mode
"----------------------------------------
" Help search
nnoremap <F1> K
" Run the current vim script file
nnoremap <F8> :source %<CR>
" Cursor remaps
nnoremap <Down> gj
nnoremap <Up>   gk
nnoremap h <Left>
nnoremap j gj
nnoremap k gk
nnoremap l <Right>
" Open foldings by l
if has('folding')
  nnoremap <expr> l foldlevel(line('.')) ? "\<Right>zo" : "\<Right>"
endif
" <C-s> to save
inoremap <C-s> <ESC>:w<CR>a
nnoremap <C-s> :w<CR>

"----------------------------------------
" Vim Scripts
"----------------------------------------
" Move cursor to the last position when a file is open
augroup vimrcEx
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line('$') |
    \   exe "normal! g`\"" |
    \ endif
augroup END

"---------------------------------------
" Show Zenkaku spaces
"---------------------------------------
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=underline ctermfg=darkgrey gui=underline guifg=darkgrey
  silent! match ZenkakuSpace /　/
endfunction

if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd VimEnter,BufEnter * call ZenkakuSpace()
  augroup END
endif


"===================================
"
"  VIM-PLUG
"
"===================================
call plug#begin('~/.vim/plugged')

"========== General ==========
" Next generation completion framework
Plug 'Shougo/neocomplete.vim'
" Unite and create user interfaces.
Plug 'Shougo/unite.vim'
" MRU plugin includes unite.vim MRU sources
Plug 'Shougo/neomru.vim'
" Powerful shell implemented by vim.
Plug 'Shougo/vimshell.vim'
" neo-snippet plugin contains neocomplcache snippets source
Plug 'Shougo/neosnippet'
" The standard snippets repository for neosnippet
Plug 'Shougo/neosnippet-snippets'
" Vim-SnipMate defalut snippets
Plug 'skatsuta/vim-snippets'
" Interactive command execution in Vim.
Plug 'Shougo/vimproc.vim'
" Syntax checking hacks for vim
Plug 'scrooloose/syntastic'
" Vim motions on speed!
Plug 'Lokaltog/vim-easymotion'
" Git wrapper
Plug 'tpope/vim-fugitive'
" Provides insert mode auto-completion for quotes, parens, brackets, etc.
Plug 'Raimondi/delimitMate'
" Provides support for expanding abbreviations similar to emmet.
Plug 'mattn/emmet-vim'
" Run commands quickly.
Plug 'thinca/vim-quickrun'
" A Vim plugin for visually displaying indent levels in code
Plug 'nathanaelkane/vim-indent-guides'
" Monokai theme
Plug 'tomasr/molokai'
" Alpaca
Plug 'alpaca-tc/alpaca_powertabline'
" Powerline is a statusline plugin for vim, and provides statuslines and prompts
" for several other applications
Plug 'Lokaltog/powerline'
" Ctags generator for Vim
Plug 'szw/vim-tags'
" Vim plugin that displays tags in a window, ordered by scope
Plug 'majutsushi/tagbar'
" surround.vim: quoting/parenthesizing made simple
Plug 'tpope/vim-surround'
" Search Dash.app from Vim
Plug 'rizzatti/dash.vim'
" Vim plugin for the_silver_searcher, 'ag', a replacement for the Perl module / CLI script 'ack'
Plug 'rking/ag.vim'
" Wisely add 'end' in Ruby, endfunction/endif/more in Vim script, etc
Plug 'tpope/vim-endwise'
" Comment functions
Plug 'scrooloose/nerdcommenter'
" A fast, as-you-type, fuzzy-search code completion engine for Vim
"Plug 'Valloric/YouCompleteMe'
" Easily search for, substitute, and abbreviate multiple variants of a word
Plug 'tpope/vim-abolish'
" A Vim wrapper for running tests on different granularities
Plug 'janko-m/vim-test'

"========== Haskell ==========
" Vim configuration files for Haskell code
Plug 'kana/vim-filetype-haskell', { 'for': 'haskell' }
" A completion plugin for Haskell, using ghc-mod
Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }
" Vim to Haskell: A collection of vimscripts for Haskell development.
Plug 'dag/vim2hs', { 'for': 'haskell' }
" Happy Haskell programming on Vim, powered by ghc-mod
Plug 'eagletmt/ghcmod-vim', { 'for': 'haskell' }

"========== Scala ==========
" Integration of Scala into Vim
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }

"========== Golang ==========
Plug 'fatih/vim-go', { 'for': 'go' }

"========== Rust ==========
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'racer-rust/vim-racer', { 'for': 'rust '}

"========== JavaScript ==========
" Vastly improved Javascript indentation and syntax support in Vim.
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" Prettier: post install (yarn install | npm install) then load plugin only for editing
" supported files
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql'] }

"========== Elixir ==========
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }

"========== Ruby ==========
" Vim/Ruby configuration files
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
" rails.vim: Ruby on Rails power tools
Plug 'tpope/vim-rails', { 'for': 'ruby' }

"========== Systax Highlighting ==========
" Nginx
Plug 'evanmiller/nginx-vim-syntax'
" TOML
Plug 'cespare/vim-toml'
" EJS
Plug 'briancollins/vim-jst'
" Slim
Plug 'slim-template/vim-slim'

call plug#end()



"===================================
" neocomplete
"
" Next generation completion framework
"===================================
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_ignore_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Use fuzzy completion.
let g:neocomplete#enable_fuzzy_completion = 1
" Define dictionaries
let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default' : '',
  \ 'vimshell' : $HOME.'/.vimshell_hist',
  \ 'scala' : $HOME.'/.vim/dict/scala.dict',
  \ }
" Omni completion
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.ruby = '[^.*\t]\.\w*\|\h\w*::'

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags


"===================================
" neonsnippet
"
" neo-snippet plugin contains neocomplete snippets source
"===================================
" Plugin key mappings
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_or_jump)
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" load snippets
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
let g:neosnippet#snippets_directory = [
  \ '~/.vim/plugged/vim-snippets/snippets',
  \ '~/.vim/plugged/neosnippet-snippets/neosnippets',
  \ ]


"===================================
" Syntastic
"
" Syntax checking hacks for vim
"===================================
" Normally activate syntactic checking
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
" Always stic any detected errors into the location-list
let g:syntastic_always_populate_loc_list = 1
" Automatically open the |location-list| (see |syntastic-error-window|) when a buffer has errors.
let g:syntastic_auto_loc_list = 1
" Specify the height of the location lists that syntastic opens.
let g:syntastic_loc_list_height = 5
" Ignore AngularJS's directives
let g:syntastic_html_tidy_ignore_errors = [" proprietary attribute \"ng-"]
" Run syntax checks when buffers are first loaded, as well as saving
let g:syntastic_check_on_open = 1

" JavaScript
let g:syntastic_javascript_checkers = ['eslint']
" Ruby
let g:syntastic_ruby_checkers = ['rubocop']
" Go: Prevent lagging when using vim-go and syntastic
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']


"===================================
" EasyMotion
"
" Vim motions on speed!
"===================================
"Disable default mappings
let g:EasyMotion_do_mapping = 0
" Enable smartcase
let g:EasyMotion_smartcase = 1
" Jump to anywhere you want by just `4` or `3` key strokes without thinking!
" `s{char}{char}{target}`
nmap s <Plug>(easymotion-s2)
xmap s <Plug>(easymotion-s2)
omap z <Plug>(easymotion-s2)  " Avoid conflict with surround.vim
" Of course, you can map to any key you want such as `<Space>`
" map <Space>(easymotion-s2)


"===================================
" vimproc
"
" Interactive command execution in Vim.
"===================================
let vimproc_updcmd = has('win64') ?
      \ 'tools\\update-dll-mingw 64' : 'tools\\update-dll-mingw 32'


"===================================
" quickrun.vim
"
" Run commands quickly.
"===================================
let g:quickrun_config = {'*': {'split': 'vertical'}}
" Use vimproc to run
let g:quickrun_config._ = {'runner' : 'vimproc'}
" Scala 用
nnoremap <silent> <Leader>r :QuickRun -cmdopt ''<CR>


"===================================
" Unite
"
" Unite and create user interfaces.
"===================================
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_source_file_mru_limit=100
nnoremap <silent> <Leader>uy :<C-u>Unite history/yank<CR>
nnoremap <silent> <Leader>ub :<C-u>Unite file buffer<CR>
nnoremap <silent> <Leader>uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> <Leader>ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <Leader>uu :<C-u>Unite file_mru buffer<CR>


"===================================
" ghcmod.vim
"
" Happy Haskell programming on Vim, powered by ghc-mod
"===================================
autocmd FileType haskell NeoBundleSource ghcmod-vim
au FileType hs noremap <Leader>t :GhcModType<CR>
au FileType hs noremap <Leader>T :GhcModTypeClear<CR>


"===================================
" vim-indent-guides
"
" A Vim plugin for visually displaying indent levels in code
"===================================
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_auto_colors=0
let g:indent_guides_guide_size=1
autocmd VimEnter,ColorScheme * :hi IndentGuidesOdd  ctermbg=110
autocmd VimEnter,ColorScheme * :hi IndentGuidesEven ctermbg=140


"===================================
" vim-fugitive
"
" A Git wrapper so awsome, it should be illegal
"===================================
nnoremap <silent> <Leader>gbl :Gblame<CR>
nnoremap <silent> <Leader>gdf :Gdiff<CR>
nnoremap <silent> <Leader>gst :Gstatus<CR>


"===================================
" nginx-vim-syntax
"
" Nginx syntax highlighting
"===================================
au BufNewFile,BufRead *.conf set filetype=nginx


"===================================
" vim-go
"
" Go development plugin for Vim
"===================================
let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Run go tools automatically on save
let g:go_metalinter_autosave = 1

" gocode
set completeopt=menu,preview

" Key mappings
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap <Leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>n <Plug>(go-rename)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)


"===================================
" gotags & tagbar
"
" ctags-compatible tag generator for Go
"===================================
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" Disable auto comment out
autocmd Filetype * set formatoptions-=ro


"===========================================
" fzf
"
" A command line fussy finder written in Go
"===========================================
set runtimepath+=~/.fzf
noremap <silent> <Leader>f :FZF<CR>


"==========================================="
" dash.vim
"
" Search Dash.app from Vim
"===========================================
nmap <silent> <Leader>d <Plug>DashSearch


"===========================================
" pt (the platinum searcher)
"===========================================
nnoremap <silent> <Leader>g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif


"===========================================
" php.vim
"===========================================
" $VIMRUNTIME/syntax/php.vim
let g:php_baselib = 1
let g:php_htmlInStrings = 1
let g:php_noShortTags = 1
let g:php_sql_query = 1

" $VIMRUNTIME/syntax/sql.vim
let g:sql_type_default = 'mysql'

" syntax highlighting for .inc files
au BufNewFile,BufRead *.inc set filetype=php


"===========================================
" rust.vim
"===========================================
let g:rustfmt_autosave = 1

"===========================================
" Racer
"===========================================
"set hidden
"let g:racer_cmd = '$HOME/.cargo/bin/racer'
"let $RUST_SRC_PATH = '$HOME/src/github.com/rust-lang/rust/src/'


"===========================================
" NERD Commenter
"===========================================
let g:NERDSpaceDelims = 1


"===========================================
" test.vim
"===========================================
" Key mappings
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

"===========================================
" vim-prettier
"===========================================
autocmd BufWritePre *.js,*.json,*.css,*.scss,*.less,*.graphql PrettierAsync
